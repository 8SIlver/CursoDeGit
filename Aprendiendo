
Clase 1
-Git .- Es un control de versiones
-Repositorio = carpeta donde se almacena las versiones de un proyect:
           repoLocal - repoRemoto

Clase 2
-Estados en Git:
     Modified (archivo modificado), 
     Staged   (confirmacion cambios guardado, preparado para repositorio local), 
     Commited (comentario y listo esta en repo.Local)
     finalmente hemos hecho un COMMIT=fotoDeCambio(s)     
 (archivo traqueado = se le esta haciendo seguimiento de modificaciones)
 -HEAD .- Donde estas en un mapa, solo puedes estar en uno, y ese es head=cabeza=estasAqui,
          es un puntero
 -Rama .-  Es un camino paralelo del codigo, es un puntero, se usa para avanzar en otra cosa y esto lo hace no   lineal, esto da paso al desarrollo colaborativo, trabajan en ramas y al finalizar se unen al main  
 Ojo: Una rama es un puntero que apunta a un commit.
  
Clase 3
(fast-forward = fusionar ramas,mueve puntero de la que estamos a la rama que estamos mergeando)
-Fusionar ramas .- Dos ramas se comparan linea por linea y se unen,y se genera un commit automatico,
puede haber conflictos, en general sucede cuando estas trabajando en un mismo archivo. Tambien se puede eliminar una rama.

                                         IMAGEN                      

Clase 4
-GitHub .- Software en la nube que esta integrado con git. Se utiliza para gestionar, trabajar colaborativamente, entre otras; con  repositorios de Git.

                                         IMAGEN

-Repositorios remotos .- Repos hospedados en un servidor, punto de sincronizacion de repos locales    
Observacion: Un repoLocal puede enlazarse a varios reposRemotos     
-Llave SSH = firma .- Se usa para autentificarse de forma segura, entre tu compu y un servidor, evita escribir usuario y contrasña cada vez, es muy segura.   
  Clonar un Repositorio .- Podemos descargar un repo remoto a nuestro escritorio
-Push/Pull/PullRequest .-
  *Escribir en un repoRemoto .- Podemos trabajar localmente y subir un commit al repoRemoto, Push=Empujar
  Crear ramaRemota .- Hacemos una rama local y luego la subimos a la RepoRemota
  Eliminar ramasRemota .- se lo puede hacer desde gitHub, actualizar/eliminar la referencia que hay en Repolocal de que aun existe dicha rama
  *Traer cambios de repoRemoto a local .- Util en trabajo colaborativo ya que traes cambios que alguien a subido Pull=Jalar.
  *PullRequest/PR .- Solicitud para fusionar una rama con otra en un repo, en gitHub en este caso, y alguien revisa el codigo antes de integrarlo. Esto puedes hacerlo desde gitHub por facilidad.
Observacion: Tanto el push como el pull puenden dar conflictos, similare a cuando hacemos merge..., porque en si son como fusiones pero en repoRemotos.

Clase 5
-Git Flow .- Estrategia de trabajo de git, define modelo estructurado 'ramas especializadas' para gestionar desarollo de software. Principales ramas: 
  RamasPrincipales   Main, codigo en produccion.           
                     Develop, codigo en desarrollo.
  RamasSoporte       Feature/nombre, Para nuevas funcionalidades.
                     Release/numero, Preparar una nueva version estable.
                     Hotfix/nombre,  Para arreglar errores de produccion.
-GitHub Flow .- Estrategia de trabajo agil pensada para desarrollo continuo y frecuente, alternativa mas simple a git flow, solo tiene ramas de trabajo a integrarase a main por medio de P.R. 
-Filosofia para toma de desiciones en fusiones: 
    Ship .- Fusionar sin revision, desicion pequeña,dentro de tu responsabilidad.
    Show .- Discusion tras fusion, desicion que puede tener impacto, pero no necesita aprobacion.  
    Ask  .- Hace Discusion/feedback/P.R.,antes de fusionar.

Clase 6 
-Buenas practicas en git .- Es un estandar y es importante cuando trabajas en equipo
1. cada cuanto hacer un commit, pues a menudo,que sea modular sigue la idea rastros coon migas de pan 
                                           imagen 
2. Escribe buenos commits .- Usa verbo imperativo, escribe en minuscula!, se claro/conciso/preciso, no uses reglas de puntuacion, que sea modular, usa preficos como: feat, fix, perf, build, ci, docs, refactor, style, test, segun el que estes haciendo...                                          
3. Escribe un buen nombre de rama .- Dicho nombre debe estar relacionado con lo que se esta haciendo en la rama y de ser claro/consistente, usa IDs de JIRA u otro...
Conclusion: Git es commits y ramas entonces debes manejar buenas practicas en commits y ramas

Clase 7
-Desacer cambios .- Sucede por diferentes razones, un error en algo,para retroceder, etc.
Hay 2 tipos:
      Comados destructivos, afecta a historial de los comits.
      No destructivos, trabajan sobre el historial de los commits sin afectarlo.
Y tenemos 3 comandos para esto:
'Destructivos'
Ej. git reset hay 2: 
      soft, elimina el commit pero mantine cambios que e hecho en ese commit
      hard, lo mismo que el anterio, pero los cambios los elimina/descarta
'No destructivos'       
Ej. git revert, revierte cambios que hizo un commit, y crea uno nuevo con los cambios revertidos 
Ej. git checkout, permite recuperar codigo especifico de commits   

Clase 8
-Hooks, Alias y trucos de Git

Hook .- Es un scrip que se ejecuta automaticamente, cuando ocurren ciertos eventos en un repo. estos se encuentran en la capeta de .git/hooks/ del repo, y permite automatizar tareas. 
Hay unos tipos por ejemplo:
    los del lado del cliente .- pre-commit , pre-push, post-commit, commit-msg, y otros qeu tu puedes crear...
    los del lado del servidor .- pre-receive, update, post-receive,...

Alias .- Es una forma de crear un comando personalizado o atajo para comandos largos o complejos, permite hacer uno mas corto en lugar del completo. Ej. git status /a/ git st
Esto se hace agregando un alias a la configuracion de Git:
git config --global alias.st alias.st status

Trucos de Git : Guarda tus cambios temporalmente - git stash   
                Aplicar cambios de commits en especifico - git cherry <SHA>
                Detectar que commit introdujo el bug - git bisect
                Rercupera un archivo en concreto de otra rama o commit - git checkout <SHA> <archivo>        
                entre otros
                           .
                           .
                           .